# slapd.conf.acls
#
# See slapd.access(5) for details on ACLs
#
# Andrew Findlay
# andrew.findlay@skills-1st.co.uk
# 20 June 2011
# Updated 20 Oct 2011 for Tags/Groups

# Enforce ACL rules on the content of entries that are about to be added

add_content_acl on

# DIT Content Rule for inetOrgPerson (2.16.840.1.113730.3.2.2)
#
# Prevent unwanted objectclasses on user entries
#
# This is a belt-and-braces protection as normally only the registration agent
# and LDAP admins can change the objectClass attribute
#
# We also make both uid and uniqueIdentifier mandatory:
#    uid is the username, so it is essential for the user to locate their entry
#    uniqueIdentifier is the naming attribute
#
# Note that because this is part of the schema, even the rootDN cannot easily break the rules

ditcontentrule ( 2.16.840.1.113730.3.2.2
	NAME 'dcrInetOrgPerson'
	DESC 'Control content of inetOrgPerson entries'
	AUX ( mozilliansObject $ mozilliansPerson )
	MUST ( uid $ uniqueIdentifier )
	)

# Prevent unwanted objectclasses on link entries
#
# In this case the rule simply prevents the addition of other object classes

ditcontentrule ( 1.3.6.1.4.1.13769.3000.1.3
	NAME 'dcrMozilliansLink'
	DESC 'Control content of mozilliansLink entries'
	)

# Prevent unwanted objectclasses on group/tag entries
#
# In this case the rule simply prevents the addition of other object classes

ditcontentrule ( 1.3.6.1.4.1.13769.3000.1.5
	NAME 'dcrMozilliansGroup'
	DESC 'Control content of mozilliansGroup entries'
	)

# We define some attribute sets as objectclasses for convenience.
# Note that these are NOT intended to be used as objectclasses of actual entries.
# The base OID for these is 1.3.6.1.4.1.13769.3000.3

objectclass ( 1.3.6.1.4.1.13769.3000.3.1
	NAME 'attrsetSelfModifiable'
        DESC 'Attributes that a user can modify in their own entry'
        AUXILIARY
        MAY ( cn $ givenName $ sn $ displayname $ mail $ uid $ telephoneNumber
		$ jpegPhoto $ description $ c $ st $ l )
        )

objectclass ( 1.3.6.1.4.1.13769.3000.3.2
	NAME 'attrsetTagDescription'
        DESC 'Attributes that describe a tag/group but do not reveal membership'
        AUXILIARY
        MAY ( objectClass $ uniqueIdentifier $ cn $ displayname $ description )
        )

# Replicators have overriding read-only access to everything

access to *
	by group="cn=replicators,ou=groups,ou=system,dc=mozillians,dc=org" read
	by * break

# Permit everyone to read the service entries

access to dn.exact=""
	by * read

access to dn.exact="cn=Subschema"
	by * read

# Permit everyone to read the main structural entries
# Also allow Registration Agents and LDAP Admins to add and delete user entries

access to dn.exact="dc=mozillians,dc=org"
	by * read

access to dn.exact="ou=people,dc=mozillians,dc=org" attrs="children"
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by group/groupOfNames/member="cn=registrationAgents,ou=groups,ou=system,dc=mozillians,dc=org" add
	by * read

access to dn.exact="ou=people,dc=mozillians,dc=org"
	by * read

# Block access to the system tree
# (but leave just enough for system users to authenticate and change their own passwords)

access to dn.children="ou=accounts,ou=system,dc=mozillians,dc=org" attrs="userPassword"
	by self =w
	by * auth

access to dn.subtree="ou=system,dc=mozillians,dc=org"
	by * none

# Tags / Groups
# These are largely public-read but we control access to membership information

# Mozillians need write access to children of the tags tree
# so that they can create new tags
access to dn.exact="ou=tags,dc=mozillians,dc=org" attrs="children"
	by set="user/mozilliansVouchedBy" write
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
        by * break

# Everyone can read the root of the tags tree
access to dn.exact="ou=tags,dc=mozillians,dc=org"
        by * read

# We allow Mozillians to create new tags
# ...but they must set themselves as the initial owner
# and they must use the correct objectclass.
# LDAP Admins can also create groups with the correct objectclass.
# Note that Anon and Applicants are prevented from creating tags by the
# attrs="children" rule above.
access to dn.onelevel="ou=tags,dc=mozillians,dc=org" attrs="entry" filter="(objectclass=mozilliansGroup)"
	by set="user & this/owner" write
	by set="user & this/owner/member" write
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
        by * read

# Admin can always modify all tag attributes
access to dn.onelevel="ou=tags,dc=mozillians,dc=org" filter="(objectclass=mozilliansGroup)"
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by * break
	
# Managed tags have special permission settings
# We use the '+perm' notation here for consistency with the next rule
# NOTE: we would like to prevent applicants who are mistakenly added to
# a manager group from exercising this power, but that is hard...
access to dn.subtree="ou=tags,dc=mozillians,dc=org" filter="(manager=*)"
        by set="user & this/manager/member" write
	by set="user & this/owner" write
	by set="user & this/owner/member" write
	by set="user/mozilliansVouchedBy" +dxcsr
	by users self+cs
	by * break

# The entry owner can modify the owner attribute
access to dn.subtree="ou=tags,dc=mozillians,dc=org" attrs="owner"
	by set="user & this/owner" write
	by set="user & this/owner/member" write
	by * break

# The entry owner can modify the naming and descriptive attributes
# (we need this to allow creation in the first place)
# Others only get to read and search
access to dn.subtree="ou=tags,dc=mozillians,dc=org" attrs="@attrsetTagDescription"
	by set="user & this/owner" write
	by set="user & this/owner/member" write
        by * read

# Mozillians can read members of tags, Applicants can only search
# All users are allowed to add themselves to tags
# All users are allowed to remove themselves from tags
# We give the write permission first then continue to see if
# we should add more permissions.
access to dn.subtree="ou=tags,dc=mozillians,dc=org" attrs="member"
	by users self+w continue
	by set="user/mozilliansVouchedBy" +dxcsr
        by users self+cs
	by * none

# Mozillians can read all other attributes, but others may not
access to dn.subtree="ou=tags,dc=mozillians,dc=org"
	by set="user/mozilliansVouchedBy" read
        by * none


# Deal with lookup tables
# All authenticated users may read and search
# Members of the manager group of the parent entry can change/add/delete
# Anon cannot see this at all

# At the top level we only allow LDAP Admin to write, so that
# they can create new tables
access to dn.exact="ou=tables,dc=mozillians,dc=org"
	by users read
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by * none

# Each table has a manager group that can write
# We also allow the LDAPAdmin group to do so
access to dn.onelevel="ou=tables,dc=mozillians,dc=org"
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by set="this/manager/member & user" write
	by users read
	by * none

# Table entries are controlled by the table's manager group or by LDAPAdmin members
access to dn.subtree="ou=tables,dc=mozillians,dc=org"
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by set="this/-1/manager/member & user" write
	by users read
	by * none

# Users may change their own passwords
# Registration Agents and LDAP Admins may change passwords for other people
# Anon may authenticate

access to attrs="userPassword"
	by self =w
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" =w
	by group/groupOfNames/member="cn=registrationAgents,ou=groups,ou=system,dc=mozillians,dc=org" =w
	by * auth

# User entries have link entries beneath them.
# These may be created and modified by the user and by LDAP Admins.
# They should be searchable by all Mozillians

# First give access to the child entries of the user entry
access to dn.onelevel="ou=people,dc=mozillians,dc=org" filter="(objectClass=inetOrgPerson)" attrs="children"
	by self write
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by set="user/mozilliansVouchedBy" read
	by * none

# Now we match the entries using a regex pattern so that we can also work out
# who owns them (captured into $1).
# The filter makes sure that users cannot add any other sort of entry under their own entry.

access to dn.regex="^[^,]+,(uniqueIdentifier=[^,]+,ou=people,dc=mozillians,dc=org)$" filter="(objectclass=mozilliansLink)"
	by dn.regex="^$1$$" write
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by set="user/mozilliansVouchedBy" read
	by * none

# We allow all authenticated users to view and modify the basic
# informational attributes in their own entry
# LDAP Admins can change these attributes in any user entry
# Registration Agents can create and add to these attributes
# but may not delete existing values
access to attrs="@attrsetSelfModifiable" filter="(&(objectClass=inetOrgPerson)(objectClass=mozilliansPerson))"
	by self write
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by group/groupOfNames/member="cn=registrationAgents,ou=groups,ou=system,dc=mozillians,dc=org" add
	by * break

# LDAP Admins can modify a few more attributes than normal users can
access to attrs="objectclass,uniqueidentifier"
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by group/groupOfNames/member="cn=registrationAgents,ou=groups,ou=system,dc=mozillians,dc=org" add
	by * break

# User may read their own voucher but not modify it
# Mozillians may add their own DN to another user's voucher attribute
# Mozillians may read/search everyone's voucher attribute
# LDAP Admins may change the voucher attribute in any way
access to attrs="mozilliansVouchedBy"
	by self read
	by set="user/mozilliansVouchedBy" selfadd
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by group/groupOfNames/member="cn=registrationAgents,ou=groups,ou=system,dc=mozillians,dc=org" add
	by * break

# LDAP Admins may add and delete user entries
# but only if they have the correct objectClass
access to dn.onelevel="ou=people,dc=mozillians,dc=org" filter="(&(objectClass=inetOrgPerson)(objectClass=mozilliansPerson))" attrs="entry"
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" write
	by group/groupOfNames/member="cn=registrationAgents,ou=groups,ou=system,dc=mozillians,dc=org" add
	by * break

# Mozillians may read/search everything that is not restricted above
# LDAP Admins may do the same
access to *
	by set="user/mozilliansVouchedBy" read
	by group/groupOfNames/member="cn=LDAPAdmins,ou=groups,ou=system,dc=mozillians,dc=org" read
	by * break

# Anon may read and search just enough to find a DN given a uid
# non-Mozillian users can do this too
access to attrs="entry"
	by anonymous read
	by users read
	by * break

access to attrs="uid"
	by anonymous search
	by self read
	by users search
	by * break

access to attrs="uniqueIdentifier"
	by anonymous read
	by users read
	by * break

# We have to allow anon search on objectclass as clients often include
# it in the filter when looking for the user entry in order to authenticate
access to attrs="objectClass"
	by anonymous search
	by self read
	by users search
	by * break

# Allow all users to see everything in their own entry that is not restricted above
access to *
	by self read
	by * break

# Default deny

access to *
	by * none

